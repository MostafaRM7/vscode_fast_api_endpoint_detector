[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "example.main",
        "description": "example.main",
        "peekOfCode": "app = FastAPI(\n    title=\"Sample FastAPI App\",\n    description=\"A sample FastAPI application for testing the VS Code extension\",\n    version=\"1.0.0\"\n)\n@app.get(\"/\")\nasync def root():\n    \"\"\"Root endpoint\"\"\"\n    return {\"message\": \"Hello World from FastAPI!\", \"status\": \"success\"}\n@app.get(\"/health\")",
        "detail": "example.main",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "update_item",
        "kind": 2,
        "importPath": "test_endpoints",
        "description": "test_endpoints",
        "peekOfCode": "def update_item(item_id: int):\n    return {\"updated\": item_id}\n@app_router.delete(\"/delete/{item_id}\")\ndef delete_item(item_id: int):\n    return {\"deleted\": item_id}\n@public_dev_router.patch('/patch-item')\nasync def patch_item():\n    return {\"patched\": True}",
        "detail": "test_endpoints",
        "documentation": {}
    },
    {
        "label": "delete_item",
        "kind": 2,
        "importPath": "test_endpoints",
        "description": "test_endpoints",
        "peekOfCode": "def delete_item(item_id: int):\n    return {\"deleted\": item_id}\n@public_dev_router.patch('/patch-item')\nasync def patch_item():\n    return {\"patched\": True}",
        "detail": "test_endpoints",
        "documentation": {}
    },
    {
        "label": "app_router",
        "kind": 5,
        "importPath": "test_endpoints",
        "description": "test_endpoints",
        "peekOfCode": "app_router = APIRouter()\nwallet_router = APIRouter()\npublic_dev_router = APIRouter()\n@app_router.get('/simple')\nasync def simple_get():\n    return {\"message\": \"simple\"}\n@wallet_router.post('/create-payment')\nasync def create_payment():\n    return {\"status\": \"created\"}\n@public_dev_router.get(\"/health-check\")",
        "detail": "test_endpoints",
        "documentation": {}
    },
    {
        "label": "wallet_router",
        "kind": 5,
        "importPath": "test_endpoints",
        "description": "test_endpoints",
        "peekOfCode": "wallet_router = APIRouter()\npublic_dev_router = APIRouter()\n@app_router.get('/simple')\nasync def simple_get():\n    return {\"message\": \"simple\"}\n@wallet_router.post('/create-payment')\nasync def create_payment():\n    return {\"status\": \"created\"}\n@public_dev_router.get(\"/health-check\")\nasync def health_check():",
        "detail": "test_endpoints",
        "documentation": {}
    },
    {
        "label": "public_dev_router",
        "kind": 5,
        "importPath": "test_endpoints",
        "description": "test_endpoints",
        "peekOfCode": "public_dev_router = APIRouter()\n@app_router.get('/simple')\nasync def simple_get():\n    return {\"message\": \"simple\"}\n@wallet_router.post('/create-payment')\nasync def create_payment():\n    return {\"status\": \"created\"}\n@public_dev_router.get(\"/health-check\")\nasync def health_check():\n    return {\"status\": \"ok\"}",
        "detail": "test_endpoints",
        "documentation": {}
    }
]